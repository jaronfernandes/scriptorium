// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NOTE: For User, role can take the following values: 
// VISITOR
// USER
// ADMIN // Shortform for: System administrator

// User schema
model User {
  id          Int        @id @default(autoincrement())
  firstName   String                                     
  lastName    String                                     
  email       String     @unique // ASSUME: emails need to be unique
  phoneNumber String                                     
  password    String
  avatar      String?    // Storing the file path to the avatar image (uploaded via Multer)                                
  role        String     @default(VISITOR)  // ASSUME: Users are given the role with the lowest permissions (VISITOR)
  createdAt   DateTime   @default(now()) // Not sure if these two attributes are needed, but could be useful on based on designs in lecture. 
  updatedAt   DateTime   @updatedAt

  // Defining the one to many relationships
  blogPosts   BlogPost[] // A user can create many blog posts
  comments    Comment[]  // A user can comment on many blog posts
  ratings     Rating[]   // A user can rate blog posts and comments
  reports     Report[]   // A user can report blog posts or comments
}

enum Role {
  VISITOR
  USER
  ADMIN
}

// Blog Post schema 
// TODO: Do we need a createdAt attribute?
// TODO: Is the onDelete used properly here? (Ie: If user is deleted, their corresponding blog posts should be too)
model BlogPost {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  tags      String[]  // List of tags for filtering blog posts
  hidden    Boolean   @default(false) // Indicates if content is hidden
  upvotes   Int       @default(0)
  downvotes Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt


  // Foreign Key
  authorId  Int       // Foreign key to User
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Defining the one to many relationships
  reports   Report[]
  comments  Comment[] // One-to-many relation with comments
  ratings   Rating[]   // Blog post can be rated
}

// Comment schema 
// TODO: Is the onDelete used properly here? (Ie: If user or post is deleted, the comment should be deleted too)
model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  authorId  Int // Foreign key to User
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    Int  // Foreign key to BlogPost
  post      BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  hidden    Boolean   @default(false) // Indicates if content is hidden
  upvotes   Int       @default(0)
  downvotes Int       @default(0)
  createdAt DateTime  @default(now())
  // Defining the one to many relationships
  reports   Report[]  // allowing comments to have multiple reports
}

// Report schema
// TODO: Are the optional foerign keys formatted properly
// TODO: Is the onDelete used properly here? (Ie: If the reported blog post or comment is deleted, so should the report?)
model Report {
  id        Int       @id @default(autoincrement())
  contentType  String   // Either "BlogPost" or "Comment"
  explanation  String
  blogPostId    Int?      // Foreign key to BlogPost
  commentId     Int?      // Foreign key to Comment
  // Optional foreign keys (reports can be filed for either posts or comments)
  blogPost  BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  comment Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

// Tag Schema (since string lists can't be used as the type for tags in CodeTemplate)
model Tag {
  id      Int         @id @default(autoincrement())
  name    String
  CodeTemplates CodeTemplateTag[] // IF IMPLICIT, just replace it with CodeTemplates CodeTemplate[]
}

// Code Template Schema
model CodeTemplate {
  id          Int            @id @default(autoincrement())
  title       String
  explanation String
  tags        CodeTemplateTag[]  // IF IMPLICIT, just replace it with tags Tag[]
  code        String
  parentId    Int?  // Can be null since it may not have a parent.      
  parent      CodeTemplate?  @relation("ForkedTemplates", fields: [parentId], references: [id])
  children    CodeTemplate[] @relation("ForkedTemplates") // One-to-many relation for forked versions of the template
}

// Explicit Code-Tag relationship (for now)
model CodeTemplateTag {
  template    CodeTemplate   @relation(fields: [templateId], references: [id])
  templateId  Int  // relation scalar field (used in the `@relation` attribute above)
  tag         Tag            @relation(fields: [tagId], references: [id])
  tagId       Int   // relation scalar field (used in the `@relation` attribute above)
  assignedAt  DateTime       @default(now())
  assignedBy  String // Probably the user who assigned the tag
  @@id([templateId, tagId])
}
